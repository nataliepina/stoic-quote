{"version":3,"sources":["components/Footer.tsx","Theme.tsx","components/Button.tsx","components/Header.tsx","components/Quote.tsx","components/QuoteContainer.tsx","helpers/helpers.ts","global-styles.js","App.tsx","serviceWorker.js","index.tsx"],"names":["FooterContainer","styled","footer","theme","colors","light","Copyright","p","primary","Footer","copyright","data-testid","href","target","rel","med","dark","body","text","fonts","secondary","fontSizes","sm","base","md","lg","xl","sizes","xxl","secondaryTheme","baseStyled","Btn","button","Button","onClick","children","HeaderTitle","h1","HeaderContainer","div","ButtonWrapper","Header","props","title","setTheme","icon","faLightbulb","primaryTheme","faCloudMoon","QuoteWrapper","BlockQuote","blockquote","Citation","cite","Line","Quote","quote","faQuoteLeft","author","faQuoteRight","MainContainer","QuoteContainer","useState","setQuote","loading","setLoading","toolTip","setToolTip","useRef","useEffect","stoicQuote","require","a","res","current","setTimeout","getQuote","type","color","height","width","faRedo","value","dummy","document","createElement","appendChild","setAttribute","select","execCommand","removeChild","copyText","faCopy","id","faTwitter","GlobalStyles","createGlobalStyle","Container","main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.92897464.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\ninterface FooterProps {\n  copyright?: string;\n}\nconst FooterContainer = styled.footer`\n  width: 100%;\n  color: ${({ theme: { colors } }) => colors.light};\n  font-size: 1rem;\n`;\n\nconst Copyright = styled.p`\n  a {\n    text-decoration: none;\n    color: ${({ theme: { colors } }) => colors.light};\n\n    &:hover {\n      color: ${({ theme: { colors } }) => colors.primary};\n    }\n  }\n`;\n\nconst Footer: React.FC<FooterProps> = ({\n  copyright,\n}: FooterProps): React.ReactElement => {\n  return (\n    <FooterContainer>\n      <Copyright>\n        <a\n          data-testid=\"footer\"\n          href=\"https://github.com/nataliepina/stoic-quote\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {copyright}\n        </a>\n      </Copyright>\n    </FooterContainer>\n  );\n};\n\nexport default Footer;\n","import baseStyled, { ThemedStyledInterface } from 'styled-components';\n\n// interface ThemeProps {\n//   theme: {\n//     colors: {\n//       light: string;\n//       med: string;\n//       dark: string;\n//       primary: string;\n//       body: string;\n//       text: string;\n//     };\n//     fonts: {\n//       primary: string;\n//       secondary: string;\n//     };\n//     fontSizes: {\n//       sm: string;\n//       base: string;\n//       md: string;\n//       lg: string;\n//       xl: string;\n//     };\n//     sizes: {\n//       sm: string;\n//       md: string;\n//       lg: string;\n//       xl: string;\n//       xxl: string;\n//     };\n//   };\n//   children?: React.ReactNode;\n// }\n\nexport const theme = {\n  colors: {\n    light: '#e2e8ec',\n    med: '#AAB8C2',\n    dark: '#0a0c0e',\n    primary: '#a7deec',\n    body: '#0a0c0e',\n    text: '#e2e8ec',\n  },\n  fonts: {\n    primary: 'Fraunces',\n    secondary: 'Cinzel',\n  },\n  fontSizes: {\n    sm: '.8em',\n    base: '1em',\n    md: '1.3em',\n    lg: '2em',\n    xl: '2.8em',\n  },\n  sizes: {\n    sm: '8px',\n    md: '16px',\n    lg: '24px',\n    xl: '48px',\n    xxl: '70px',\n  },\n};\n\nexport const secondaryTheme = {\n  colors: {\n    light: '#0a0c0e',\n    med: '#AAB8C2',\n    dark: '#e2e8ec',\n    primary: '#20778d',\n    body: '#e2e8ec',\n    text: '#0a0c0e',\n  },\n  fonts: {\n    primary: 'Fraunces',\n    secondary: 'Cinzel',\n  },\n  fontSizes: {\n    sm: '.8em',\n    base: '1em',\n    md: '1.3em',\n    lg: '2em',\n    xl: '2.8em',\n  },\n  sizes: {\n    sm: '8px',\n    md: '16px',\n    lg: '24px',\n    xl: '48px',\n    xxl: '70px',\n  },\n};\n\nexport type Theme = typeof theme;\nexport const styled = baseStyled as ThemedStyledInterface<Theme>;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface ButtonProps {\n  onClick?: () => void;\n  children?: React.ReactNode;\n}\n\nexport const Btn = styled.button`\n  cursor: pointer;\n  padding: 0.25rem 0.75rem;\n  background-color: ${({ theme: { colors } }) => colors.dark};\n  color: ${({ theme: { colors } }) => colors.light};\n  font-size: ${({ theme: { fontSizes } }) => fontSizes.sm};\n  border: 2px solid ${({ theme: { colors } }) => colors.light};\n  font-family: ${({ theme: { fonts } }) => fonts.secondary};\n  min-width: 50px;\n\n  &:hover {\n    transition: all 0.8s;\n    color: ${({ theme: { colors } }) => colors.primary};\n    transform: scale(1, 1);\n    border: 2px solid ${({ theme: { colors } }) => colors.primary};\n  }\n\n  span {\n    margin-right: 8px;\n  }\n\n  a {\n    color: ${({ theme: { colors } }) => colors.light};\n\n    &:hover {\n      transition: all 0.6s;\n      color: ${({ theme: { colors } }) => colors.primary};\n      transform: scale(1, 1);\n    }\n  }\n\n  svg {\n    font-size: 20px;\n  }\n`;\n\nconst Button: React.FC<ButtonProps> = ({\n  onClick,\n  children,\n}: ButtonProps): React.ReactElement => {\n  return <Btn onClick={onClick}>{children}</Btn>;\n};\n\nexport default Button;\n","import { faCloudMoon, faLightbulb } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { secondaryTheme, theme as primaryTheme, Theme } from '../Theme';\nimport Button from './Button';\n\ninterface HeaderProps {\n  setTheme: React.Dispatch<React.SetStateAction<Theme>>;\n  title: string;\n}\nexport const HeaderTitle = styled.h1`\n  margin: 0.75rem auto 0;\n  color: ${({ theme: { colors } }) => colors.light};\n  font-size: ${({ theme: { fontSizes } }) => fontSizes.md};\n  font-weight: 300;\n  font-family: ${({ theme: { fonts } }) => fonts.secondary};\n`;\n\nexport const HeaderContainer = styled.div`\n  display: flex;\n`;\n\nexport const ButtonWrapper = styled.div`\n  position: absolute;\n`;\n\nconst Header: React.FC<HeaderProps> = (\n  props: HeaderProps\n): React.ReactElement => {\n  const { title } = props;\n  function setLightTheme() {\n    props.setTheme(secondaryTheme);\n  }\n\n  function setDarkTheme() {\n    props.setTheme(primaryTheme);\n  }\n\n  return (\n    <HeaderContainer>\n      <ButtonWrapper>\n        <Button onClick={setLightTheme}>\n          <FontAwesomeIcon icon={faLightbulb} />\n        </Button>\n        <Button onClick={setDarkTheme}>\n          <FontAwesomeIcon icon={faCloudMoon} />\n        </Button>\n      </ButtonWrapper>\n      <HeaderTitle>{title}</HeaderTitle>\n    </HeaderContainer>\n  );\n};\n\nexport default Header;\n","import { faQuoteLeft, faQuoteRight } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport styled from 'styled-components';\n\ntype QuoteProps = {\n  quote: QuoteData | null;\n};\n\nexport interface QuoteData {\n  quote: string;\n  author: string;\n}\n\nconst QuoteWrapper = styled.div`\n  margin: 0 auto;\n  padding: ${({ theme: { sizes } }) => sizes.md};\n  width: 90%;\n  color: ${({ theme: { colors } }) => colors.light};\n\n  @media (min-width: 768px) {\n    padding: ${({ theme: { sizes } }) => sizes.xxl};\n  }\n`;\n\nconst BlockQuote = styled.blockquote`\n  text-align: center;\n  font-size: ${({ theme: { fontSizes } }) => fontSizes.md};\n`;\n\nconst Citation = styled.cite`\n  padding: ${({ theme: { sizes } }) => sizes.sm};\n  font-size: ${({ theme: { fontSizes } }) => fontSizes.md};\n\n  &:before {\n    content: '— ';\n  }\n`;\n\nconst Line = styled.div`\n  text-align: center;\n  color: ${({ theme: { colors } }) => colors.light};\n  font-size: ${({ theme: { fontSizes } }) => fontSizes.md};\n\n  &:before,\n  &:after {\n    color: ${({ theme: { colors } }) => colors.light};\n    width: 35%;\n    height: 1px;\n\n    /* Changed to border-top (instead of border) to simulate a line better */\n    border-top: 2px solid #ccc;\n\n    /* Styles added */\n    display: inline-block;\n    content: '';\n\n    /* Use padding to vertical align the line */\n    /* Use padding in em for a responsive icon height */\n    padding-top: 0.5em;\n\n    /* Use margins to give the lines some space around the icon */\n    /* Use margins in % for a responsive space */\n    margin-left: 5%;\n    margin-right: 5%;\n  }\n`;\n\nconst Quote = ({ quote }: QuoteProps): JSX.Element => {\n  return (\n    <>\n      <Line>\n        <FontAwesomeIcon icon={faQuoteLeft} />\n      </Line>\n\n      <QuoteWrapper>\n        <BlockQuote>{quote?.quote}</BlockQuote>\n        <Citation>{quote?.author}</Citation>\n      </QuoteWrapper>\n\n      <Line>\n        <FontAwesomeIcon icon={faQuoteRight} />\n      </Line>\n    </>\n  );\n};\n\nexport default Quote;\n","import { faTwitter } from '@fortawesome/free-brands-svg-icons';\nimport { faCopy, faRedo } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { useEffect, useRef, useState } from 'react';\nimport Loader from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport styled from 'styled-components';\nimport { copyText } from '../helpers/helpers';\nimport Button from './Button';\nimport Quote, { QuoteData } from './Quote';\n\nexport const MainContainer = styled.div`\n  width: 75vw;\n  margin: 1rem auto;\n  display: flex;\n  flex-direction: column;\n  place-items: center center;\n  font-family: ${({ theme: { fonts } }) => fonts.primary};\n  padding: 0.5rem 0;\n\n  @media (min-width: 768px) {\n    padding: 2.5rem 0;\n  }\n`;\n\nexport const ButtonWrapper = styled.div`\n  margin: ${({ theme: { sizes } }) => sizes.xl} auto;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  gap: ${({ theme: { sizes } }) => sizes.md};\n  flex-direction: column;\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n  }\n`;\n\nconst QuoteContainer = (): React.ReactElement => {\n  const [quote, setQuote] = useState<QuoteData | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [toolTip, setToolTip] = useState('Copy');\n  const text = useRef('');\n  const newQuoteText = 'New Quote';\n  const tweetQuote = 'Tweet';\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const stoicQuote = require('stoic-quotes');\n\n    const getQuote = async () => {\n      try {\n        setLoading(true);\n        const res = await stoicQuote();\n        const { quote, author } = res;\n\n        setQuote({ quote, author });\n        text.current = `\"${quote}\" -${author}`;\n      } catch (e) {\n        setQuote(null);\n      } finally {\n        // setLoading(false);\n        // Use below to see loading state\n        setTimeout(() => setLoading(false), 300);\n      }\n    };\n    if (!quote) getQuote();\n  }, [quote]);\n\n  const getNewQuote = () => {\n    setQuote(null);\n    setLoading(true);\n  };\n\n  const handleCopy = () => {\n    copyText(text.current);\n    setToolTip('Copied');\n    setTimeout(() => setToolTip('Copy'), 1500);\n  };\n\n  return (\n    <MainContainer>\n      <section>\n        {loading ? (\n          <Loader type=\"ThreeDots\" color=\"lightgray\" height={80} width={80} />\n        ) : (\n          <Quote quote={quote} />\n        )}\n      </section>\n      <ButtonWrapper>\n        <Button onClick={getNewQuote}>\n          <span>{newQuoteText}</span>\n          <FontAwesomeIcon icon={faRedo} />\n        </Button>\n        <Button onClick={handleCopy}>\n          <span>{toolTip}</span>\n          <FontAwesomeIcon icon={faCopy} />\n        </Button>\n        <Button>\n          <span>{tweetQuote}</span>\n          <a\n            id=\"tweet-quote\"\n            title=\"Tweet This Quote!\"\n            href={`https://twitter.com/intent/tweet?text=${text.current}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <FontAwesomeIcon icon={faTwitter} />\n          </a>\n        </Button>\n      </ButtonWrapper>\n    </MainContainer>\n  );\n};\n\nexport default QuoteContainer;\n","// Allow for text to be copyable\nexport const copyText = (value: string): void => {\n  const dummy = document.createElement('input');\n  document.body.appendChild(dummy);\n  dummy.setAttribute('value', value);\n  dummy.select();\n  document.execCommand('copy');\n  document.body.removeChild(dummy);\n};\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n  *,\n  *::after,\n  *::before {\n    box-sizing: border-box;\n  }\n\n  body {\n    font-family: 'Fraunces', sans-serif;\n    background: ${({ theme: { colors } }) => colors.body};\n    color: ${({ theme: { colors } }) => colors.text};\n  }\n  `;\n\nexport default GlobalStyles;\n","import React, { useState } from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\nimport './App.css';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport StoicQuote from './components/QuoteContainer';\nimport GlobalStyles from './global-styles';\nimport { theme as primaryTheme } from './Theme';\nexport const Container = styled.main`\n  text-align: center;\n  height: 100vh;\n  font-size: calc(10px + 2vmin);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 1rem;\n`;\n\nconst App = (): React.ReactElement => {\n  const title = 'Stoic Quotes';\n  const copyright = 'Natalie Pina \\u00A9 2021';\n\n  const [theme, setTheme] = useState(primaryTheme);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyles />\n      <Container>\n        <Header title={title} setTheme={setTheme} />\n        <StoicQuote />\n        <Footer copyright={copyright} />\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\n//eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\n//eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// react axe for a11y\nif (process.env.NODE_ENV !== 'production') {\n  import('react-axe').then((axe) => {\n    axe.default(React, ReactDOM, 1000);\n    ReactDOM.render(<App />, document.getElementById('root'));\n  });\n} else {\n  ReactDOM.render(<App />, document.getElementById('root'));\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}