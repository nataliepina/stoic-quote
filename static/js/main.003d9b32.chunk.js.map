{"version":3,"sources":["components/Footer.tsx","components/DisplayQuote.tsx","components/StoicQuote.tsx","helpers/helpers.ts","components/Title.tsx","Theme.jsx","App.tsx","serviceWorker.js","index.tsx"],"names":["FooterContainer","styled","footer","theme","colors","light","Copyright","p","primary","Footer","copyright","data-testid","href","target","rel","QuoteWrapper","div","sizes","xxl","fontSizes","lg","BlockQuote","blockquote","Citation","cite","Line","md","DisplayQuote","quote","icon","faQuoteLeft","author","faQuoteRight","QuoteContainer","ButtonWrapper","xl","Button","button","dark","StoicQuote","useState","setQuote","loading","setLoading","toolTip","setToolTip","text","useRef","useEffect","stoicQuote","require","a","res","current","setTimeout","getQuote","type","color","height","width","onClick","value","dummy","document","createElement","body","appendChild","setAttribute","select","execCommand","removeChild","copyText","id","title","faTwitter","HeaderTitle","h1","Title","med","fonts","sm","base","Theme","children","GlobalStyles","createGlobalStyle","Container","main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.003d9b32.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\ninterface FooterProps {\n  copyright?: string;\n}\nconst FooterContainer = styled.footer`\n  width: 100%;\n  color: ${({ theme: { colors } }) => colors.light};\n  font-size: 1rem;\n`;\n\nconst Copyright = styled.p`\n  a {\n    text-decoration: none;\n    color: ${({ theme: { colors } }) => colors.light};\n\n    &:hover {\n      color: ${({ theme: { colors } }) => colors.primary};\n    }\n  }\n`;\n\nconst Footer: React.FC<FooterProps> = ({\n  copyright,\n}: FooterProps): React.ReactElement => {\n  return (\n    <FooterContainer>\n      <Copyright>\n        <a\n          data-testid=\"footer\"\n          href=\"https://github.com/nataliepina/stoic-quote\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {copyright}\n        </a>\n      </Copyright>\n    </FooterContainer>\n  );\n};\n\nexport default Footer;\n","import { faQuoteLeft, faQuoteRight } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport styled from 'styled-components';\n\ntype QuoteProps = {\n  quote: QuoteData | null;\n};\n\nexport interface QuoteData {\n  quote: string;\n  author: string;\n}\n\nconst QuoteWrapper = styled.div`\n  margin: 0 auto;\n  padding: ${({ theme: { sizes } }) => sizes.xxl};\n  width: 90%;\n  color: ${({ theme: { colors } }) => colors.light};\n  font-size: ${({ theme: { fontSizes } }) => fontSizes.lg};\n`;\n\nconst BlockQuote = styled.blockquote`\n  text-align: center;\n`;\n\nconst Citation = styled.cite`\n  &:before {\n    content: 'â€” ';\n  }\n`;\n\nconst Line = styled.div`\n  text-align: center;\n  color: ${({ theme: { colors } }) => colors.light};\n  font-size: ${({ theme: { fontSizes } }) => fontSizes.md};\n\n  &:before,\n  &:after {\n    color: ${({ theme: { colors } }) => colors.light};\n    width: 35%;\n    height: 1px;\n\n    /* Changed to border-top (instead of border) to simulate a line better */\n    border-top: 2px solid #ccc;\n\n    /* Styles added */\n    display: inline-block;\n    content: '';\n\n    /* Use padding to vertical align the line */\n    /* Use padding in em for a responsive icon height */\n    padding-top: 0.5em;\n\n    /* Use margins to give the lines some space around the icon */\n    /* Use margins in % for a responsive space */\n    margin-left: 5%;\n    margin-right: 5%;\n  }\n`;\n\nconst DisplayQuote = ({ quote }: QuoteProps): JSX.Element => {\n  return (\n    <>\n      <Line>\n        <FontAwesomeIcon icon={faQuoteLeft} />\n      </Line>\n\n      <QuoteWrapper>\n        <BlockQuote>{quote?.quote}</BlockQuote>\n        <Citation>{quote?.author}</Citation>\n      </QuoteWrapper>\n\n      <Line>\n        <FontAwesomeIcon icon={faQuoteRight} />\n      </Line>\n    </>\n  );\n};\n\nexport default DisplayQuote;\n","import { faTwitter } from '@fortawesome/free-brands-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { useEffect, useRef, useState } from 'react';\nimport Loader from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport styled from 'styled-components';\nimport { copyText } from '../helpers/helpers';\nimport DisplayQuote, { QuoteData } from './DisplayQuote';\n\nexport const QuoteContainer = styled.div`\n  width: 75vw;\n  margin: 1rem auto;\n  display: flex;\n  flex-direction: column;\n  place-items: center center;\n  font-family: 'Fraunces', serif;\n  font-weight: 300;\n  padding: 2.5rem 0;\n  font-size: 1rem;\n  font-weight: 600;\n`;\n\nexport const ButtonWrapper = styled.div`\n  margin: ${({ theme: { sizes } }) => sizes.xl} auto;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  gap: ${({ theme: { sizes } }) => sizes.md};\n  font-family: 'Fraunces', serif;\n`;\n\nexport const Button = styled.button`\n  cursor: pointer;\n  padding: 0.25rem 0.75rem;\n  background-color: ${({ theme: { colors } }) => colors.dark};\n  color: ${({ theme: { colors } }) => colors.light};\n  font-size: ${({ theme: { fontSizes } }) => fontSizes.md};\n  border: 2px solid ${({ theme: { colors } }) => colors.light};\n  font-family: 'Cinzel', serif;\n\n  &:hover {\n    transition: all 0.8s;\n    color: ${({ theme: { colors } }) => colors.primary};\n    transform: scale(1, 1);\n  }\n\n  a {\n    color: ${({ theme: { colors } }) => colors.light};\n\n    &:hover {\n      transition: all 0.6s;\n      color: ${({ theme: { colors } }) => colors.primary};\n      transform: scale(1, 1);\n    }\n  }\n`;\n\nconst StoicQuote = (): React.ReactElement => {\n  const [quote, setQuote] = useState<QuoteData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [toolTip, setToolTip] = useState('Copy');\n  const text = useRef('');\n  const newQuoteText = 'New Quote';\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const stoicQuote = require('stoic-quotes');\n\n    const getQuote = async () => {\n      try {\n        setLoading(true);\n        const res = await stoicQuote();\n        const { quote, author } = res;\n\n        setQuote({ quote, author });\n        text.current = `\"${quote}\" -${author}`;\n      } catch (e) {\n        setQuote(null);\n      } finally {\n        setTimeout(() => setLoading(false), 500);\n      }\n    };\n    if (!quote) getQuote();\n  }, [quote]);\n\n  const getNewQuote = () => {\n    setQuote(null);\n    setLoading(true);\n  };\n\n  const handleCopy = () => {\n    copyText(text.current);\n    setToolTip('Copied');\n    setTimeout(() => setToolTip('Copy'), 1500);\n  };\n\n  return (\n    <>\n      <QuoteContainer>\n        <section>\n          {loading ? (\n            <Loader type=\"ThreeDots\" color=\"lightgray\" height={80} width={80} />\n          ) : (\n            <DisplayQuote quote={quote} />\n          )}\n        </section>\n        <ButtonWrapper>\n          <Button onClick={getNewQuote}>{newQuoteText}</Button>\n          <Button onClick={handleCopy}>{toolTip}</Button>\n          <Button>\n            <a\n              id=\"tweet-quote\"\n              title=\"Tweet This Quote!\"\n              href={`https://twitter.com/intent/tweet?text=${text.current}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <FontAwesomeIcon icon={faTwitter} />\n            </a>\n          </Button>\n        </ButtonWrapper>\n      </QuoteContainer>\n    </>\n  );\n};\n\nexport default StoicQuote;\n","// Allow for text to be copyable\nexport const copyText = (value: string): void => {\n  const dummy = document.createElement('input');\n  document.body.appendChild(dummy);\n  dummy.setAttribute('value', value);\n  dummy.select();\n  document.execCommand('copy');\n  document.body.removeChild(dummy);\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface TitleProps {\n  title: string;\n}\nexport const HeaderTitle = styled.h1`\n  margin: 0.75rem auto 0;\n  color: ${({ theme: { colors } }) => colors.light};\n  font-size: ${({ theme: { fontSizes } }) => fontSizes.xl};\n  font-weight: 300;\n  font-family: 'Cinzel', serif;\n`;\n\nconst Title: React.FC<TitleProps> = ({\n  title,\n}: TitleProps): React.ReactElement => {\n  return <HeaderTitle>{title}</HeaderTitle>;\n};\n\nexport default Title;\n","import React from 'react';\nimport { ThemeProvider } from 'styled-components';\n\nconst theme = {\n  colors: {\n    light: '#e2e8ec',\n    med: '#AAB8C2',\n    dark: '#0a0c0e',\n    primary: '#a7deec',\n  },\n  fonts: ['Fraunces', 'sans-serif'],\n  fontSizes: {\n    sm: '.75em',\n    base: '1em',\n    md: '2em',\n    lg: '3em',\n  },\n  sizes: {\n    sm: '8px',\n    md: '16px',\n    lg: '24px',\n    xl: '48px',\n    xxl: '70px',\n  },\n};\n\nconst Theme = ({ children }) => (\n  <ThemeProvider theme={theme}>{children}</ThemeProvider>\n);\n\nexport default Theme;\n","import React from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport './App.css';\nimport Footer from './components/Footer';\nimport StoicQuote from './components/StoicQuote';\nimport Title from './components/Title';\nimport Theme from './Theme';\n\nconst GlobalStyles = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css2?family=Cinzel:wght@400;600;700&display=swap');\n  @import url('https://fonts.googleapis.com/css2?family=Fraunces:ital,wght@0,100;0,300;0,400;0,500;1,300&display=swap');\n\n  body {\n    font-family: 'Fraunces', sans-serif;\n  }\n`;\n\nexport const Container = styled.main`\n  text-align: center;\n  min-height: 100vh;\n  font-size: calc(10px + 2vmin);\n  background-color: ${({ theme: { colors } }) => colors.dark};\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 1rem;\n`;\n\nconst App = () => {\n  const title = 'Stoic Quotes';\n  const copyright = 'Natalie Pina \\u00A9 2021';\n\n  return (\n    <Theme>\n      <GlobalStyles />\n      <Container>\n        <Title title={title} />\n        <StoicQuote />\n        <Footer copyright={copyright} />\n      </Container>\n    </Theme>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// react axe for a11y\nif (process.env.NODE_ENV !== 'production') {\n  import('react-axe').then((axe) => {\n    axe.default(React, ReactDOM, 1000);\n    ReactDOM.render(<App />, document.getElementById('root'));\n  });\n} else {\n  ReactDOM.render(<App />, document.getElementById('root'));\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}