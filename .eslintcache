[{"/Users/nataliepina/dev/stoic-quote/src/index.tsx":"1","/Users/nataliepina/dev/stoic-quote/src/serviceWorker.js":"2","/Users/nataliepina/dev/stoic-quote/src/App.tsx":"3","/Users/nataliepina/dev/stoic-quote/src/components/Footer.tsx":"4","/Users/nataliepina/dev/stoic-quote/src/components/StoicQuote.tsx":"5","/Users/nataliepina/dev/stoic-quote/src/helpers/helpers.ts":"6","/Users/nataliepina/dev/stoic-quote/src/components/DisplayQuote.tsx":"7","/Users/nataliepina/dev/stoic-quote/src/Theme.jsx":"8","/Users/nataliepina/dev/stoic-quote/src/components/Title.tsx":"9"},{"size":790,"mtime":1625862054182,"results":"10","hashOfConfig":"11"},{"size":5104,"mtime":1625862054183,"results":"12","hashOfConfig":"11"},{"size":1185,"mtime":1625872823505,"results":"13","hashOfConfig":"11"},{"size":879,"mtime":1625872823507,"results":"14","hashOfConfig":"11"},{"size":3528,"mtime":1625876454264,"results":"15","hashOfConfig":"11"},{"size":296,"mtime":1625862054177,"results":"16","hashOfConfig":"11"},{"size":1938,"mtime":1625872823506,"results":"17","hashOfConfig":"11"},{"size":538,"mtime":1625872823506,"results":"18","hashOfConfig":"11"},{"size":502,"mtime":1625872823508,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1vcrsms",{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/nataliepina/dev/stoic-quote/src/index.tsx",[],["43"],"/Users/nataliepina/dev/stoic-quote/src/serviceWorker.js",["44","45"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n",["46"],"/Users/nataliepina/dev/stoic-quote/src/App.tsx",["47"],"import React from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport './App.css';\nimport Footer from './components/Footer';\nimport StoicQuote from './components/StoicQuote';\nimport Title from './components/Title';\nimport Theme from './Theme';\n\nconst GlobalStyles = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css2?family=Cinzel:wght@400;600;700&display=swap');\n  @import url('https://fonts.googleapis.com/css2?family=Fraunces:ital,wght@0,100;0,300;0,400;0,500;1,300&display=swap');\n\n  body {\n    font-family: 'Fraunces', sans-serif;\n  }\n`;\n\nexport const Container = styled.main`\n  text-align: center;\n  min-height: 100vh;\n  font-size: calc(10px + 2vmin);\n  background-color: ${({ theme: { colors } }) => colors.dark};\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 1rem;\n`;\n\nconst App = () => {\n  const title = 'Stoic Quotes';\n  const copyright = 'Natalie Pina \\u00A9 2021';\n\n  return (\n    <Theme>\n      <GlobalStyles />\n      <Container>\n        <Title title={title} />\n        <StoicQuote />\n        <Footer copyright={copyright} />\n      </Container>\n    </Theme>\n  );\n};\n\nexport default App;\n","/Users/nataliepina/dev/stoic-quote/src/components/Footer.tsx",[],"/Users/nataliepina/dev/stoic-quote/src/components/StoicQuote.tsx",[],"/Users/nataliepina/dev/stoic-quote/src/helpers/helpers.ts",[],"/Users/nataliepina/dev/stoic-quote/src/components/DisplayQuote.tsx",[],"/Users/nataliepina/dev/stoic-quote/src/Theme.jsx",["48","49","50"],"import React from 'react';\nimport { ThemeProvider } from 'styled-components';\n\nconst theme = {\n  colors: {\n    light: '#e2e8ec',\n    med: '#AAB8C2',\n    dark: '#0a0c0e',\n    primary: '#a7deec',\n  },\n  fonts: ['Fraunces', 'sans-serif'],\n  fontSizes: {\n    sm: '.75em',\n    base: '1em',\n    md: '2em',\n    lg: '3em',\n  },\n  sizes: {\n    sm: '8px',\n    md: '16px',\n    lg: '24px',\n    xl: '48px',\n    xxl: '70px',\n  },\n};\n\nconst Theme = ({ children }) => (\n  <ThemeProvider theme={theme}>{children}</ThemeProvider>\n);\n\nexport default Theme;\n","/Users/nataliepina/dev/stoic-quote/src/components/Title.tsx",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":23,"column":26,"nodeType":"55","messageId":"56","endLine":23,"endColumn":32},{"ruleId":"53","severity":1,"message":"57","line":131,"column":8,"nodeType":"58","messageId":"59","endLine":131,"endColumn":29},{"ruleId":"51","replacedBy":"60"},{"ruleId":"53","severity":1,"message":"57","line":29,"column":13,"nodeType":"61","messageId":"59","endLine":29,"endColumn":18},{"ruleId":"53","severity":1,"message":"57","line":27,"column":15,"nodeType":"61","messageId":"59","endLine":27,"endColumn":32},{"ruleId":"53","severity":1,"message":"62","line":27,"column":16,"nodeType":"63","messageId":"64","endLine":27,"endColumn":28},{"ruleId":"65","severity":1,"message":"66","line":27,"column":18,"nodeType":"67","endLine":27,"endColumn":26},"jsx-a11y/accessible-emoji",[],"@typescript-eslint/explicit-module-boundary-types","Argument 'config' should be typed.","Identifier","missingArgType","Missing return type on function.","FunctionDeclaration","missingReturnType",[],"ArrowFunctionExpression","Object pattern argument should be typed.","ObjectPattern","missingArgTypeUnnamed","react/prop-types","'children' is missing in props validation","Property"]